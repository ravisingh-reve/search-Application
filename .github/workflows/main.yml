name: LHCI-output-webhook
on:
  - push
jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Audit URLs using Lighthouse
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            'https://www.tatacliq.com'
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-results
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          path: lighthouse-results
      - name: List artifact files
        run: |
          ls 
      - name: Send lighthouse report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          script: >
            const fs = require('fs'); const path = require('path');

            const artifactPath = 'lighthouse-results'; const regex = /lhr-.*\.json/; const files = fs.readdirSync(artifactPath); const matchingFiles = files.filter((file) => regex.test(file));         const filePath = path.join(artifactPath, matchingFiles[0]); const jsonString = fs.readFileSync(filePath,'utf8'); const data = JSON.parse(jsonString);

            const fcp = data.audits['first-contentful-paint'].numericValue; const lcp = data.audits['largest-contentful-paint'].numericValue; const fmp = data.audits['first-meaningful-paint'].numericValue; const tbt = data.audits['total-blocking-time'].numericValue; const si = data.audits['speed-index'].numericValue; const cls = data.audits['cumulative-layout-shift'].displayValue;

            const lightHouseLinks = JSON.parse('${{steps.lighthouse.outputs.links}}'); const lightHouseManifest = JSON.parse('${{steps.lighthouse.outputs.manifest}}'); const performance = lightHouseManifest[0].summary['performance']* 100; const accessibility = lightHouseManifest[0].summary['accessibility']* 100; const bestPractices = lightHouseManifest[0].summary['best-practices']* 100; const seo = lightHouseManifest[0].summary['seo']* 100; const pwa = lightHouseManifest[0].summary['pwa']* 100; const links = lightHouseLinks['https://www.tatacliq.com/'];
            const currentDate = new Date();
            console.log('resultsPath','${{steps.lighthouse.outputs.resultsPath}}'); console.log('links','${{steps.lighthouse.outputs.links}}'); console.log('assertionResults','${{steps.lighthouse.outputs.assertionResults}}'); console.log('manifest','${{steps.lighthouse.outputs.manifest}}'); 
            const bodyData = {   "msite": {
                "url": "www.tatacliq.com",
                "currentDateTime":currentDate,
                "pageName": "Pdp",
                "webVitalData": {
                    "Performance": `${performance}`,
                    "Accessibility":`${accessibility}`,
                    "bestPractices": `${bestPractices}`,
                    "seo": `${seo}`,
                    "pwa": `${pwa}`,
                    "fcp": `${fcp}`,
                    "lcp": `${lcp}`,
                    "fmp": `${fmp}`,
                    "tbt": `${tbt}`,
                    "si": `${si}`,
                    "cls": `${cls}`,    
                }
              }           
            } 
            
      #       const manifest = JSON.parse(${{ steps.LHCIAction.outputs.manifest }} || '[]');
      #       const htmlPath = manifest.length > 0 ? JSON.stringify(manifest[0].htmlPath) : '""';
      #       core.setOutput('htmlPath', htmlPath);
      # - name: Deploy Stage
      #   uses: fjogeleit/http-request-action@v1
      #   with:
      #     url: '${{secrets.WEB_VITALS_HOOK}}'
      #     method: POST
      #     customHeaders: '{"Content-Type": "application/json"}'
      #     data: |
      #         {
      #           "type":"message",
      #           "attachments":[
      #               {
      #                 "contentType":"application/vnd.microsoft.card.adaptive",
      #                 "contentUrl":null,
      #                 "content":{
      #                     "$schema":"http://adaptivecards.io/schemas/adaptive-card.json",
      #                     "type":"AdaptiveCard",
      #                     "version":"1.2",
      #                     "body":[
      #                         {
      #                         "type": "TextBlock",
      #                         "text": 'Lighthouse Report ${{steps.htmlPath.outputs.htmlPath}}'
      #                         }
      #                     ]
      #                 }
      #               }
      #           ]
      #         } 

